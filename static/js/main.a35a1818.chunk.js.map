{"version":3,"sources":["components/Navbar.js","components/pages/Home.js","components/pages/Staff.js","components/SigninWidget.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","type","data-toggle","data-target","id","Component","withAuth","state","authenticated","checkAuthentication","a","async","props","auth","isAuthenticated","setState","login","logout","this","mainContent","onClick","Staff","currentUserName","currentUserEmail","idToken","JSON","parse","localStorage","getItem","claims","email","name","SigninWidget","el","ReactDOM","findDOMNode","widget","OktaSignIn","baseUrl","logo","renderEl","onSuccess","onError","remove","res","redirect","sessionToken","session","token","err","console","log","pathname","onAuthRequired","history","push","App","basename","process","issuer","client_id","redirect_uri","window","location","origin","path","exact","component","Home","render","ImplicitCallback","Boolean","hostname","match","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a35a1818.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark mb-4\">\r\n        <div className=\"container\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            Above Solutions Staff Portal\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/staff\">\r\n                  Staff\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { withAuth } from '@okta/okta-react';\r\n\r\nexport default withAuth(\r\n  class Home extends Component {\r\n    state = { authenticated: null };\r\n\r\n    checkAuthentication = async () => {\r\n      const authenticated = await this.props.auth.isAuthenticated();\r\n      if (authenticated !== this.state.authenticated) {\r\n        this.setState({ authenticated });\r\n      }\r\n    };\r\n\r\n    async componentDidMount() {\r\n      this.checkAuthentication();\r\n    }\r\n\r\n    async componentDidUpdate() {\r\n      this.checkAuthentication();\r\n    }\r\n\r\n    login = async () => {\r\n      this.props.auth.login('/');\r\n    };\r\n\r\n    logout = async () => {\r\n      this.props.auth.logout('/');\r\n    };\r\n\r\n    render() {\r\n      if (this.state.authenticated === null) return null;\r\n      const mainContent = this.state.authenticated ? (\r\n        <div>\r\n          <p className=\"lead\">\r\n            You have entered the staff portal,{' '}\r\n            <Link to=\"/staff\">click here</Link>\r\n          </p>\r\n          <button className=\"btn btn-light btn-lg\" onClick={this.logout}>\r\n            Logout\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <p className=\"lead\">\r\n            If you are a staff member, please get your credentials from your\r\n            supervisor\r\n          </p>\r\n          <button className=\"btn btn-dark btn-lg\" onClick={this.login}>\r\n            Login\r\n          </button>\r\n        </div>\r\n      );\r\n\r\n      return (\r\n        <div className=\"jumbotron\">\r\n          <h1 className=\"display-4\">Staff Portal</h1>\r\n          {mainContent}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n);\r\n","import React, { Component } from 'react';\r\n\r\nclass Staff extends Component {\r\n  state = {\r\n    currentUserName: '',\r\n    currentUserEmail: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    const idToken = JSON.parse(localStorage.getItem('okta-token-storage'));\r\n    this.setState({\r\n      currentUserEmail: idToken.idToken.claims.email,\r\n      currentUserName: idToken.idToken.claims.name\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { currentUserEmail, currentUserName } = this.state;\r\n    return (\r\n      <div className=\"jumbotron\">\r\n        <h1 className=\"display-4\">Welcome!</h1>\r\n        <p className=\"lead\">You have reached the authorized staff area of the portal</p>\r\n        <h5>Name: {currentUserName}</h5>\r\n        <h5>Email: {currentUserEmail}</h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Staff;\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport OktaSignIn from '@okta/okta-signin-widget/dist/js/okta-sign-in.min';\r\nimport '@okta/okta-signin-widget/dist/css/okta-sign-in.min.css';\r\n\r\nclass SigninWidget extends Component {\r\n  componentDidMount() {\r\n    const el = ReactDOM.findDOMNode(this);\r\n    this.widget = new OktaSignIn({\r\n      baseUrl: this.props.baseUrl,\r\n      logo: 'logo.png'\r\n    });\r\n    this.widget.renderEl({ el }, this.props.onSuccess, this.props.onError);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.widget.remove();\r\n  }\r\n\r\n  render() {\r\n    return <div />;\r\n  }\r\n}\r\n\r\nexport default SigninWidget;\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport SigninWidget from './SigninWidget';\r\nimport { withAuth } from '@okta/okta-react';\r\n\r\nexport default withAuth (\r\n  class Login extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        authenticated: null\r\n      };\r\n      this.checkAuthentication();\r\n    }\r\n\r\n    async checkAuthentication() {\r\n      const authenticated = await this.props.auth.isAuthenticated();\r\n      if (authenticated !== this.state.authenticated) {\r\n        this.setState({ authenticated });\r\n      }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      this.checkAuthentication();\r\n    }\r\n\r\n    onSuccess = res => {\r\n      return this.props.auth.redirect({\r\n        sessionToken: res.session.token\r\n      });\r\n    };\r\n\r\n    onError = err => {\r\n      console.log('error logging in', err);\r\n    };\r\n\r\n    render() {\r\n      if (this.state.authenticated === null) return null;\r\n      return this.state.authenticated ? (\r\n        <Redirect to={{ pathname: '/' }} />\r\n      ) : (\r\n        <SigninWidget\r\n          baseUrl={this.props.baseUrl}\r\n          onSuccess={this.onSuccess}\r\n          onError={this.onError}\r\n        />\r\n      );\r\n    }\r\n  }\r\n);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Security, SecureRoute, ImplicitCallback } from '@okta/okta-react';\r\nimport Navbar from './components/Navbar';\r\nimport Home from './components/pages/Home';\r\nimport Staff from './components/pages/Staff';\r\nimport Login from './components/Login';\r\n\r\n// Redirect to Login if not authenticated\r\nfunction onAuthRequired({ history }) {\r\n  history.push('/login');\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Security\r\n        issuer='https://dev-528054.okta.com/oauth2/default'\r\n        client_id='0oa25b8g4nQXcCezB357'\r\n        redirect_uri={window.location.origin + '/implicit/callback'}\r\n        onAuthRequired={onAuthRequired}\r\n      >\r\n        <div className='App'>\r\n          <Navbar />\r\n          <div className='container'>\r\n            <Route path='/' exact={true} component={Home} />\r\n            <SecureRoute path='/staff' exact={true} component={Staff} />\r\n            <Route\r\n              path='/login'\r\n              render={() => <Login baseUrl='https://dev-528054.okta.com' />}\r\n            />\r\n            <Route path='/implicit/callback' component={ImplicitCallback} />\r\n          </div>\r\n        </div>\r\n      </Security>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}